# VasCruz Group UI Development Rules for Cursor AI

## PROJECT CONTEXT

- Framework: Next.js 14 with App Router
- UI Library: shadcn/ui + Radix UI
- Styling: Tailwind CSS
- Animations: Framer Motion
- i18n: next-intl (ES/EN)
- Project: VasCruz Group LLC - Commercial intermediation website

## COMPONENT STRUCTURE RULES

### Base Template for All Components

```typescript
"use client";

import { motion } from "framer-motion";
import { [ICONS] } from "lucide-react";
import { [UI_COMPONENTS] } from "@/components/ui/[component]";
import { useMessages } from "next-intl";

// Icon mapping
const iconMapping = {
  [ICON_NAME]: [ICON_COMPONENT],
};

export default function [ComponentName]() {
  const messages = useMessages();

  // Extract data from messages
  const data = (messages as any)?.[section]?.[subsection];

  // Fallback
  if (!data) {
    return (
      <section className="[SECTION_CLASSES]">
        <div className="container mx-auto px-4">
          <div className="text-center">
            <p className="text-muted-foreground">Content not available</p>
          </div>
        </div>
      </section>
    );
  }

  return (
    <section className="[SECTION_CLASSES]">
      <div className="container mx-auto px-4">
        {/* Content */}
      </div>
    </section>
  );
}
```

## CSS CLASSES STANDARDS

### Section Classes

```css
/* Hero Sections */
"-mt-[30px] lg:-mt-[64px] h-full relative overflow-hidden bg-gradient-to-br from-background via-background to-muted/20 dark:from-background dark:via-background dark:to-muted/10"

/* Content Sections */
"py-16 lg:py-20 bg-background"

/* Stats Sections */
"py-20 bg-gradient-to-r from-primary to-primary/90"

/* Process Sections */
"py-20 bg-muted/30"
```

### Typography Classes

```css
/* Main titles */
"text-3xl lg:text-4xl xl:text-5xl font-bold text-foreground"

/* Section titles */
"text-2xl lg:text-3xl font-bold text-foreground"

/* Subtitles */
"text-xl text-muted-foreground"

/* Body text */
"text-muted-foreground text-sm"
```

### Visual Elements

```css
/* Badges */
"px-4 py-2 text-sm font-medium"

/* Icons with gradients */
"w-12 h-12 bg-gradient-to-r from-primary to-primary/90 rounded-lg flex items-center justify-center"

/* Cards */
"border-border shadow-lg hover:shadow-xl transition-all duration-300 bg-card"

/* Buttons */
"rounded-xl shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-105"
```

## FRAMER MOTION ANIMATIONS

### Standard Variants

```typescript
const containerVariants = {
  hidden: { opacity: 0 },
  visible: {
    opacity: 1,
    transition: {
      staggerChildren: 0.2,
      delayChildren: 0.1,
    },
  },
};

const itemVariants = {
  hidden: { opacity: 0, y: 20 },
  visible: {
    opacity: 1,
    y: 0,
    transition: {
      duration: 0.6,
      ease: "easeOut",
    },
  },
};

const cardVariants = {
  hidden: { opacity: 0, scale: 0.8 },
  visible: {
    opacity: 1,
    scale: 1,
    transition: {
      duration: 0.8,
      ease: "easeOut",
    },
  },
};
```

### Scroll Animations

```typescript
<motion.div
  initial={{ opacity: 0, y: 60 }}
  whileInView={{ opacity: 1, y: 0 }}
  transition={{ duration: 0.6 }}
  viewport={{ once: true }}
>
```

## RESPONSIVE DESIGN

### Grid Patterns

```css
/* 2-4 columns */
"grid-cols-2 md:grid-cols-4"

/* 3-6 columns */
"grid-cols-3 lg:grid-cols-6"

/* Hero layout */
"grid-cols-1 md:grid-cols-1 lg:grid-cols-2"
```

### Breakpoints

```css
/* Mobile First */
"text-3xl lg:text-4xl xl:text-5xl"
"py-16 lg:py-20"
"grid-cols-1 md:grid-cols-2 lg:grid-cols-3"
```

## SECTION PATTERNS

### 1. Hero Sections

- Use gradient backgrounds with decorative blur elements
- Implement 2-column layout on desktop, 1-column on mobile
- Include badge, title with gradient text, subtitle
- Use container and item variants for animations

### 2. Content Sections

- Use centered layout with max-width
- Include badge, title, subtitle structure
- Implement scroll-triggered animations
- Use responsive grid for content items

### 3. Stats Sections

- Use primary gradient background
- Implement scale entrance animations
- Use responsive grid (2-4 columns)
- Apply primary-foreground text colors

### 4. Process Sections

- Use muted background
- Implement connected cards with step numbers
- Use staggered animations with delays
- Include decorative connection lines

## DATA EXTRACTION PATTERN

```typescript
// Extract data from messages
const sectionData = (messages as any)?.[section]?.[subsection];
const title = sectionData?.title;
const subtitle = sectionData?.subtitle;
const items = sectionData?.items;
const badge = sectionData?.badge;
```

## ICON MAPPING PATTERN

```typescript
const iconMapping = {
  [ICON_NAME]: [ICON_COMPONENT],
};

// Usage
const IconComponent = iconMapping[item.icon as keyof typeof iconMapping];
```

## COMMON PATTERNS

### Cards with Icons

```typescript
<Card className="h-full border-border shadow-lg hover:shadow-xl transition-all duration-300 bg-card flex flex-col">
  <CardHeader>
    <div className="flex items-center justify-center md:justify-start mb-4">
      <div className="w-12 h-12 bg-gradient-to-r from-primary to-primary/90 rounded-lg flex items-center justify-center">
        <IconComponent className="w-6 h-6 text-primary-foreground" />
      </div>
    </div>
    <CardTitle className="text-center md:text-left text-xl text-card-foreground">
      {title}
    </CardTitle>
    <CardDescription className="text-center md:text-left text-muted-foreground">
      {description}
    </CardDescription>
  </CardHeader>
  <CardContent className="flex flex-col justify-between flex-1">
    {/* Content */}
  </CardContent>
</Card>
```

### Buttons with Icons

```typescript
<Button
  size="lg"
  className="rounded-xl shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-105 text-sm md:text-lg w-full md:w-auto"
  onClick={handleClick}
>
  {buttonText}
  {icon && <IconComponent className="h-5 w-5 ml-2" />}
</Button>
```

### Lists with Checkmarks

```typescript
<ul className="space-y-2">
  {features?.map((feature, idx) => (
    <li key={idx} className="flex items-center text-sm text-muted-foreground">
      <CheckCircle className="w-4 h-4 text-green-500 mr-2 flex-shrink-0" />
      {feature}
    </li>
  ))}
</ul>
```

## DEVELOPMENT CHECKLIST

### Before Creating Component

- [ ] Verify data structure in messages
- [ ] Define icon mapping
- [ ] Plan responsive layout
- [ ] Choose appropriate animations

### During Development

- [ ] Use standard CSS classes
- [ ] Implement fallback for missing data
- [ ] Apply consistent animations
- [ ] Test responsiveness

### After Development

- [ ] Verify accessibility
- [ ] Test dark mode
- [ ] Validate animations
- [ ] Review performance

## PRINCIPLES

1. **Consistency**: Always use the same patterns
2. **Responsiveness**: Mobile-first approach
3. **Accessibility**: ARIA labels and semantic HTML
4. **Performance**: Lazy loading and optimization
5. **Maintainability**: Modular components
6. **Scalability**: Flexible data structure

## WHEN GENERATING COMPONENTS

- Always use the base template structure
- Apply the appropriate CSS classes for the section type
- Implement Framer Motion animations using standard variants
- Include fallback for missing data
- Use responsive design with standard breakpoints
- Maintain visual consistency with existing components
- Follow the data extraction pattern from messages
- Implement proper icon mapping
